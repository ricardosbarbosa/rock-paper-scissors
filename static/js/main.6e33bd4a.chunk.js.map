{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","hands","INITIAL_STATE","points","Robot","You","winner","you","robot","rounds","App","state","Math","floor","random","this","result","_this$state","round","concat","push","includes","setState","_this2","_this$state2","react_default","a","createElement","className","style","color","User","reactstrap_es","disabled","size","outline","onClick","play","map","index","key","split","join","Component","styled","div","_templateObject","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6e33bd4a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport styled, { css } from \"styled-components\";\nimport { Button, ButtonGroup } from \"reactstrap\";\n\nconst possibilities = [\n  [\"rock\",]\n]\n\nconst hands = [\"Rock\", \"Scissors\", \"Paper\"]\nconst INITIAL_STATE = {\n  points: {\n    Robot: 0,\n    You: 0,\n  },\n  winner: null,\n  you: null,\n  robot: null,\n  rounds: []\n};\n\nclass App extends Component {\n  state = INITIAL_STATE;\n  play(you) {\n    const robot = hands[Math.floor(Math.random() * 3)];\n    this.result(you, robot);\n  }\n  result(you, robot) {\n    const { rounds, points } = this.state;\n    \n    //round\n    const round = `${you}-${robot}`;\n    rounds.push(round);\n\n    //winner\n    let winner = null;\n    if (robot === you) winner = \"Empate\";\n    else if (\"Paper-Rock Rock-Scissors Scissors-Paper\".includes(round)) winner = \"You\";\n         else winner = \"Robot\";\n\n    //points\n    points[winner] = ++points[winner];\n\n    this.setState({ winner, you, robot, rounds, points });\n  }\n\n  render() {\n    const { points, winner, robot, you, rounds } = this.state;\n\n    return <div className=\"App\">\n        <header className=\"App-header\">\n          <h2>{winner}</h2>\n\n          <div style={{ color: \"yellow\" }}>\n            <User>\n              <i className=\"fa fa-robot\" />\n            </User>\n            <ButtonGroup disabled size=\"lg\">\n              <Button color=\"warning\" outline={robot !== \"Rock\"}>\n                <i className=\"fa fa-hand-rock\" />\n              </Button>\n              <Button color=\"warning\" outline={robot !== \"Paper\"}>\n                <i className=\"fa fa-hand-paper\" />\n              </Button>\n              <Button color=\"warning\" outline={robot !== \"Scissors\"}>\n                <i className=\"fa fa-hand-scissors\" />\n              </Button>\n            </ButtonGroup>\n          </div>\n          <h1>{`${points.Robot}:${points.You}`}</h1>\n          <div style={{ color: \"red\" }}>\n            <ButtonGroup size=\"lg\">\n              <Button color=\"warning\" outline={you !== \"Rock\"} onClick={() => this.play(\"Rock\")}>\n                <i className=\"fa fa-hand-rock\" />\n              </Button>\n              <Button color=\"warning\" outline={you !== \"Paper\"} onClick={() => this.play(\"Paper\")}>\n                <i className=\"fa fa-hand-paper\" />\n              </Button>\n              <Button color=\"warning\" outline={you !== \"Scissors\"} onClick={() => this.play(\"Scissors\")}>\n                <i className=\"fa fa-hand-scissors\" />\n              </Button>\n            </ButtonGroup>\n            <User>\n              <i className=\"fa fa-user\" />\n            </User>\n          </div>\n\n          <ol>{rounds.map((round, index) => {\n            return <li key={index}>{round.split(\"-\").join(\", \")}</li>\n          })} </ol>\n        </header>\n      </div>;\n  }\n}\n\nexport default App;\n\nconst User = styled.div`\n  font-size: 50px\n`","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}